#!/bin/bash -
#
# Copyright (c) 2014-2016 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

prefix=rt-
routerbridgeprefix=rt-bridge-
bridgecontrol=1

check_bridge()
{
    return $(brctl show | awk "/^$1[\t\s]+/{exit 1}")
}

check_euid()
{
    if [ $EUID -ne 0 ]
    then
        echo "You need to be root to perform this command."
        exit 1
    fi
}

start_emaneeventservice()
{
    local xml=$1
    local logfile=$2
    local pidfile=$3
    local uuidfile=$4
    local starttime="$5"

    local startoption=""

    if [ -n "$starttime" ]; then
        startoption="--starttime $(date --date "$starttime" "+%H:%M:%S")"
    fi

    if [ -f $xml ]; then

        echo "Starting emaneeventservice: $xml at $starttime"

        emaneeventservice -d "$xml" -l 3 -f "$logfile" \
                          --pidfile "$pidfile" --uuidfile "$uuidfile" \
                          $startoption

        retval=$?
    else

        echo "Missing emaneeventservice XML: $xml"

        retval=1
    fi

    return $retval
}

start_emane()
{
    local xml=$1
    local logfile=$2
    local pidfile=$3
    local uuidfile=$4

    if [ -f $xml ]; then

        echo "Starting emane: $xml"

        emane "$xml" -d -l 4 -f "$logfile" \
              --pidfile "$pidfile" --uuidfile "$uuidfile"

    echo "Please start emane in debugger: $xml"
        echo "command is: emane \"$xml\" -r -d -l 4 -f \"$logfile\" --pidfile \"$pidfile\" --uuidfile \"$uuidfile\""
        read hi
        #gnome-terminal -e "gdb -ex=r --args emane \"$xml\" -r -d -l 3 -f \"$logfile\" --pidfile \"$pidfile\" --uuidfile \"$uuidfile\""


        retval=$?
    else
        echo "Missing emane XML: $xml"
        retval=1
    fi

    return $retval
}

start_emanetransportd()
{
    local xml=$1
    local logfile=$2
    local pidfile=$3
    local uuidfile=$4

    if [ -f $xml ]; then

        echo "Starting emanetransport: $xml"

        emanetransportd -r -d "$xml" -l 3 -f "$logfile" \
                        --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?
    else

        echo "Missing emaneeventd XML: $xml"

        retval=1
    fi

    return $retval
}

start_otestpoint_broker()
{
    local xml=$1
    local logfile=$2
    local pidfile=$3
    local uuidfile=$4

    if [ -f $xml ]; then

        echo "Starting otestpoint-broker: $xml"

        otestpoint-broker "$xml" -d -l 3 -f "$logfile" \
                          --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?
    else
        echo "Missing otestpoint-broker XML: $xml"
        retval=1
    fi

    return $retval
}

wait_for_device()
{
    local device=$1
    local timeout=$2
    local waited=0

    echo -n "waiting for $device..."

    while(! ip link show | grep -q $device); do

        if [ $waited -lt $timeout ]; then
            sleep 1
            waited=$(($waited + 1))
        else
            echo "not found"
            return 1
        fi
    done

    echo "found"
    return 0
}

usage()
{
    echo
    echo " usage: democtl-host start [START OPTIONS]... TOPDIR DEMOID"
    echo "        democtl-host stop  [STOP OPTIONS]... TOPDIR DEMOID"
    echo "        democtl-host help"
    echo
    echo " start options:"
    echo "  -s STARTTIME  Demo scenario start time HH:MM:SS or any 'date' command"
    echo "                 syntax (i.e. 'now + 30 sec')"
    echo "  -e ENVFILE    Environment file to source"
    echo "  -n            Do not control the bridge"
    echo "  -w WITH-EMANE Run with emane"
    echo
    echo " stop options:"
    echo "  -e ENVFILE    Environment file to source"
    echo "  -n            Do not control the bridge"
    echo
}

if [ $EUID -ne 0 ]
then
    echo "You need to be root to perform this command."
    exit 1
fi

case "$1" in
    start)
        starttime=
        envcommand=

        withEmane=

        OPTIND=2

        # process options
        while getopts ":s:e:n:w" opt; do
            case $opt in
                n)
                    bridgecontrol=0
                    ;;
                s)
                    echo "starttime=$OPTARG"
                    starttime="$OPTARG"
                    ;;
                e)
                    envcommand="-e $OPTARG"
                    . "$OPTARG"
                    ;;
                w)
                    withEmane="true"
                    ;;
                \?)
                    echo "Invalid option: -$OPTARG" >&2
                    exit 1
                    ;;
            esac
        done

        shift $((OPTIND - 1))

        if [ $# -ne 2 ]
        then
            echo "Invalid number of parameters $@" >&2
            exit 1
        fi

        shopt -s extglob
        topdir=$1
        demoid=$2

        if [ -z "$starttime" ]
        then
            starttime=$(date -R --date "now + 40 sec")
        else
            starttime=$(date --date "$starttime" "+%H:%M:%S")
        fi

        utctime=$(date -R --date="$starttime" --utc)

        if [ ! -d $nodevolume ]
        then
            echo "Node volume does not exist:  $nodevolume" >&2
            exit 1
        fi


        mkdir -p persist/host/var/log
        mkdir -p persist/host/var/run

        if [ -n "$SUDO_USER" ]
        then
            chown -R $SUDO_USER:`id -gn $SUDO_USER` persist
        fi

        if [ -f  /var/run/demo-rt.lock ]
        then
            echo "Demo example $(cat /var/run/demo-rt.lock) already running" >&2
            echo "Run './demo-stop' first" >&2
            exit 1
        else
            echo $demoid >  /var/run/demo-rt.lock
        fi

        # disable realtime scheduling contraints
        sysctl kernel.sched_rt_runtime_us=-1

        IFS=$'\r\n' GLOBIGNORE='*' command eval  'list=($(cat $topdir/$demoid/ServerIPNodeID))'
        IFS=$',' GLOBIGNORE='*' command eval  'NodesID=($(echo "${list[1]}"))'
        for j in $(seq 2 ${#NodesID[@]})
        do
            nodeid="${NodesID[j-1]}"

            mkdir -p persist/$nodeid/var/log
            mkdir -p persist/$nodeid/var/run
            rm -f persist/$nodeid/var/log/*
            rm -f persist/$nodeid/var/run/*

            if [ -n "$SUDO_USER" ]
            then
                chown -R $SUDO_USER:`id -gn $SUDO_USER` persist/$nodeid
            fi

            IFS=$',' GLOBIGNORE='*' command eval  'list=($(cat $topdir/$demoid/dockerImage))'
            for i in $(seq 1 ${#list[@]})
            do
                rtImage=$(echo "${list[$i]}" | awk -F ''$nodeid'=' '{print $2}')
                if [[ !  -z $rtImage ]]
                then
                    break
                fi
            done

            filename='RA'$nodeid'.json'
            line=$(python scripts/readJson.py $filename)
            img=$(echo $line | awk -F 'image=' '{print $2}')
            param=$(echo $line | awk -F 'image=' '{print $1}')

            name=$prefix$nodeid
            hex=$(printf "%02x" $nodeid)
            routerbridge=$routerbridgeprefix$nodeid


        if (check_bridge $routerbridge)
            then
                echo "Creating bridge: $routerbridge"

        docker network create --driver=bridge --subnet=10.100.$nodeid.100/24 --ip-range=10.100.$nodeid.100/24 --gateway=10.100.$nodeid.100 --attachable --opt "com.docker.network.bridge.name"="$routerbridge" $routerbridge

                #brctl addbr $bridge

                wait_for_device $routerbridge 10

                ip link set $routerbridge up

                sleep 1

                ip addr add 10.100.$nodeid.100/24 dev $routerbridge

                iptables -I INPUT -i $routerbridge -j ACCEPT

                iptables -I FORWARD -i $routerbridge -j ACCEPT

        echo "Done creating bridge: $routerbridge"
            else
                echo "Found bridge: $routerbridge"
            fi


        cat <<EOF > persist/$nodeid/var/run/docker.env.$nodeid
nodeid=$nodeid
topdir=$topdir/$demoid


EOF

            cat <<EOF > persist/$nodeid/var/run/docker.conf.$nodeid
--ulimit core=-1 \
--security-opt seccomp=unconfined \
--detach \
--tty \
--volume $topdir/$demoid:$topdir/$demoid \
--name=$name \
--hostname=$name \
--network=$routerbridge \
--mac-address=02:$hex:00:01:00:01 \
--ip=10.100.$nodeid.1 \
--cap-add=ALL \
--privileged=true \
--env-file persist/$nodeid/var/run/docker.env.$nodeid \
$param \
$img \

EOF


            echo "Starting docker instance: $name"

            docker run $(cat "persist/$nodeid/var/run/docker.conf.$nodeid")

        docker logs $name >& persist/$nodeid/var/log/docker-execute.log.$nodeid

        #docker network connect --ip 10.100.$nodeid.1 $routerbridge $name 

            while (! test -f persist/$nodeid/var/log/docker-execute.log.$nodeid)
            do
                sleep 1
            done

        docker exec $name $PWD/scripts/docker-rtdemo-init &

        done

        if [ -f transportdaemon.xml ] &&
               [ ! -f NO-host-emanetransportd ]
        then

            start_emanetransportd \
                transportdaemon.xml \
                persist/host/var/log/transportdaemon.log \
                persist/host/var/run/transportdaemon.pid \
                persist/host/var/run/transportdaemon.uuid
        fi

        if [ -f platform.xml ] &&
               [ ! -f NO-host-emane ]
        then

            start_emane \
                platform.xml \
                persist/host/var/log/emane.log \
                persist/host/var/run/emane.pid \
                persist/host/var/run/emane.uuid
        fi

        if [ ! -f persist/host/var/run/emaneeventservice.pid ]
        then
            if [ -f eventservice.xml ] &&
                   [ ! -f NO-host-emaneeventservice ]
            then
                start_emaneeventservice eventservice.xml \
                                        persit/host/var/log/emaneeventservice.log \
                                        persist/host/var/run/emaneeventservice.pid \
                                        persist/host/var/run/emaneeventservice.uuid \
                                        "$starttime"
            fi
        else
            echo "Found an emaneeventservice pid file: unable to start" >&2
        fi

        if [ -f otestpoint-broker.xml ] &&
               [ ! -f NO-host-otestpoint-broker ]
        then
            start_otestpoint_broker \
                otestpoint-broker.xml \
                persist/host/var/log/otestpoint-broker.log \
                persist/host/var/run/otestpoint-broker.pid \
                persist/host/var/run/otestpoint-broker.uuid
        fi

        if [ -x host-poststart ]
        then
            ./host-poststart $demoid $nodecount
        fi
        ;;

    stop)
        OPTIND=2

        # process options
        while getopts ":ne:" opt; do
            case $opt in
                n)
                    bridgecontrol=0
                    ;;
                e)
                    envcommand="-e $OPTARG"
                    . "$OPTARG"
                    ;;
                \?)
                    echo "Invalid option: -$OPTARG" >&2
                    exit 1
                    ;;
            esac
        done

        shift $((OPTIND - 1))

        if [ $# -ne 2 ]
        then
            echo "Invalid number of parameters" >&2
            exit 1
        fi

        shopt -s extglob
        topdir=$1
        demoid=$2

        if [ ! -f  /var/run/demo-rt.lock ]
        then
            echo "There does not appear to be a running demo. No /var/run/demo-rt.lock present." >&2
            exit 1
        fi

        IFS=$'\r\n' GLOBIGNORE='*' command eval  'list=($(cat $topdir/$demoid/ServerIPNodeID))'
        IFS=$',' GLOBIGNORE='*' command eval  'NodesID=($(echo "${list[1]}"))'
        for j in $(seq 2 ${#NodesID[@]})
        do
            nodeid="${NodesID[j-1]}"

            echo "Stopping docker instance: $prefix$nodeid"

            routerbridge=$routerbridgeprefix$nodeid
            
            #if (! check_bridge $routerbridge)
            #then
            #    echo "Removing bridge: $routerbridge"

            #    iptables -D INPUT -i $routerbridge -j ACCEPT

            #    iptables -D FORWARD -i $routerbridge -j ACCEPT

            #    ip link set $routerbridge down
                
                docker network disconnect -f $routerbridge $prefix$nodeid

            #    docker network rm $routerbridge

                #brctl delbr $routerbridge

            #    echo "Done removing brifge: $routerbridge"
            #fi

            docker rm -f $prefix$nodeid
        done

        if [ -f persist/host/var/run/otestpoint-broker.pid ]
        then
            kill -QUIT $(cat persist/host/var/run/otestpoint-broker.pid)
            rm -f persist/host/var/run/otestpoint-broker.pid
        fi

        if [ -f persist/host/var/run/emaneeventservice.pid ]
        then
            kill -QUIT $(cat persist/host/var/run/emaneeventservice.pid)
            rm -f persist/host/var/run/emaneeventservice.pid
        fi

        if [ -f persist/host/var/run/emane.pid ]
        then
            kill -QUIT $(cat persist/host/var/run/emane.pid)
            rm -f persist/host/var/run/emane.pid
        fi

        if [ -f persist/host/var/run/transportdaemon.pid ]
        then
            kill -QUIT $(cat persist/host/var/run/transportdaemon.pid)
            rm -f persist/host/var/run/transportdaemon.pid
        fi

        sleep 2
        
        rm -f /var/run/demo-rt.lock
        ;;

    help)
        usage
        exit 0
        ;;
    *)
        usage
        exit 1
        ;;
esac
